/*******************************************************************************
 * Copyright (c) 2014 SunGard CSA LLC and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * SunGard CSA LLC - initial API and implementation and/or initial documentation
 *******************************************************************************/
package org.eclipse.stardust.buildtools.bom;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <p>
 * This class provides reading functionality for a set of files generated by the maven
 * call: mvn dependency:tree -Dtokens=whitespace <br>
 *
 * The input files are expected to have the following format:
 * <ul>
 * <li>First line contains current artifact
 * <li>If the file contains dependencies, then the dependencies are following one per line
 * and have the format: <br>
 * groupID:artifactID:type:classifier (optional):version:scope
 * </ul>
 * Refer to /test/resources/testinput/deplist/ for an example.
 *
 * <p>
 * The dependencies are stored in the class variable deps together with the corresponding
 * report's filename. If a dependency is already present in deps, then only the filename
 * is added to the existing entry.
 * </p>
 */
public class MavenDependencyReader
{
   private final File file;

   private final int skipLines = 1;

   final String DELIMITTER = ":";

   final int COLUMNS_COUNT_WITH_CLASSIFIER = 6;

   final int COLUMNS_COUNT_BASIC = 5;

   private final List<String> IGNORED_GROUP_IDS;

   private final String PROPS_FILE = "bom.properties";

   private final String BOM_PROPERTY = "exclude";

   private final List<Dependency> deps;

   private static final transient Logger logger = LoggerFactory
         .getLogger(MavenDependencyReader.class);

   public MavenDependencyReader(final File file, final List<Dependency> deps)
         throws IOException
   {
      if (file == null)
      {
         throw new NullPointerException("File must not be null.");
      }
      this.file = file;
      if (deps == null)
      {
         throw new NullPointerException("Set of Dependencies must not be null.");
      }

      this.deps = deps;
      this.IGNORED_GROUP_IDS = setIgnoredGroupIDs();
   }

   private ArrayList<String> setIgnoredGroupIDs() throws IOException
   {
      String[] splittedIgnoreString = null;

      InputStream fileInput = ClassLoader.getSystemClassLoader().getResourceAsStream(
            PROPS_FILE);
      Properties properties = new Properties();
      properties.load(fileInput);
      fileInput.close();

      String ignoreString = (String) properties.get(BOM_PROPERTY);
      splittedIgnoreString = ignoreString.split(",");

      return new ArrayList<String>(Arrays.asList(splittedIgnoreString));
   }

   public File getFile()
   {
      return file;
   }

   /**
    * This read method keeps a map of all prior read dependencies. No duplicates. It adds
    * the originating file info to the object as well.
    *
    * @throws IOException
    */
   public void read() throws IOException
   {
      final BufferedReader reader = new BufferedReader(new FileReader(file));

      try
      {

         String line = reader.readLine();
         for (int i = 0; i < skipLines; i++)
         {
            line = reader.readLine();

         }

         while (line != null && line.trim().length() > 1
               && !line.trim().contentEquals("none"))
         {
            line = line.trim();
            final String[] splittedLine = line.split("\\" + DELIMITTER, -1);
            final Dependency dep;
            // dependency entry does not contain a classifier
            if (splittedLine.length == COLUMNS_COUNT_BASIC)
            {
               String classifier = "";
               dep = new Dependency(splittedLine[0].trim(), splittedLine[1].trim(),
                     splittedLine[2].trim(), classifier.trim(), splittedLine[3].trim(),
                     splittedLine[4].trim(), file.getName().trim());
               // dependency entry does contain a classifier
            }
            else if (splittedLine.length == COLUMNS_COUNT_WITH_CLASSIFIER)
            {
               dep = new Dependency(splittedLine[0].trim(), splittedLine[1].trim(),
                     splittedLine[2].trim(), splittedLine[3].trim(),
                     splittedLine[4].trim(), splittedLine[5].trim(), file.getName()
                           .trim());
            }

            else
            {
               throw new UnsupportedOperationException("Unsupported format found: "
                     + line);
            }

            addDependency(dep);
            line = reader.readLine();
         }
      }

      finally
      {
         reader.close();
      }
   }

   void addDependency(Dependency dep)
   {
      boolean toBeIgnored = false;
      for (int i = 0; i < IGNORED_GROUP_IDS.size(); i++)
      {
         String groupId = IGNORED_GROUP_IDS.get(i);
         if (dep.groupId().contains(groupId))
            toBeIgnored = true;
      }
      if (!toBeIgnored)
         add(dep, deps);
   }

   public void add(Dependency dep, List<Dependency> deps)
   {
      // Find out if dependency is already stored. If yes, append
      // project to existing one.
      if (deps.contains(dep))
      {
         Dependency depStored = deps.get(deps.indexOf(dep));

         String projectList = depStored.project();
         projectList = projectList + "," + dep.project();
         depStored.setProject(projectList);

         String scopeList = depStored.scope();
         String currentScope = dep.scope();
         if (scopeList.contains(currentScope))
            ;
         else
         {
            scopeList = scopeList + "," + currentScope;
            depStored.setScope(scopeList);
         }
         String typeList = depStored.getType();
         String currentType = dep.getType();
         if (typeList.contains(currentType))
            ;
         else
         {
            typeList = typeList + "," + currentType;
            depStored.setType(typeList);
         }

         String classifierList = depStored.getClassifier();
         String currentClassifier = dep.getClassifier();
         if (classifierList.contains(currentClassifier))
            ;
         else
         {
            classifierList = classifierList + "," + currentClassifier;
            depStored.setClassifier(classifierList);
         }
      }
      else
      {
         deps.add(dep);
      }
   }

}
